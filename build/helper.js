// Generated by CommonJS Everywhere 0.9.7
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.10.26',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/src/helper.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Helper, slice = [].slice;
      Helper = {
        partial: function () {
          var bounded, element, f, values;
          f = arguments[0], values = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          bounded = function () {
            var i, len, results;
            results = [];
            for (i = 0, len = values.length; i < len; i++) {
              element = values[i];
              results.push(element);
            }
            return results;
          }();
          return function () {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return f.apply(this, bounded.concat(args));
          };
        },
        use: function () {
          var args, context, fnc;
          fnc = arguments[0], context = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          if (fnc && typeof fnc === 'function') {
            return fnc.apply(context, args);
          } else {
            return fnc;
          }
        },
        makeTagFunctions: function (obj) {
          var i, len, ref, results, tgname;
          ref = Helper.tags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tgname = ref[i];
            results.push(obj[tgname] = Helper.partial(obj.el, obj, tgname));
          }
          return results;
        },
        tags: [
          'div',
          'ul',
          'li',
          'form',
          'input',
          'select',
          'option',
          'i',
          'a',
          'h1',
          'h2',
          'h3',
          'h4',
          'span'
        ]
      };
      module.exports = Helper;
    }.call(this));
  });
  require('/src/helper.js');
}.call(this, this));