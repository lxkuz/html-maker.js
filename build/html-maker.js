// Generated by CommonJS Everywhere 0.9.7
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.10.26',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/src/html-maker.js', function (module, exports, __dirname, __filename) {
    (function () {
      var HtmlMaker, helper, bind = function (fn, me) {
          return function () {
            return fn.apply(me, arguments);
          };
        };
      helper = require('/src/helper.js', module);
      HtmlMaker = function () {
        function HtmlMaker() {
          this.draw = bind(this.draw, this);
          this.toString = bind(this.toString, this);
          this.start = bind(this.start, this);
        }
        HtmlMaker.prototype.start = function (func) {
          var res;
          this.buffer = [];
          helper.makeTagFunctions(this);
          res = helper.use(func, this, this);
          return this.toString(res);
        };
        HtmlMaker.prototype.el = function (parent, tag, attrs, func) {
          var obj;
          obj = {};
          obj.buffer = [];
          obj.tag = tag;
          obj.el = this.el;
          obj.attrs = {};
          helper.makeTagFunctions(obj);
          if (!func && typeof attrs === 'function') {
            func = attrs;
          }
          if (func) {
            if (typeof func === 'function') {
              obj.text = helper.use(func, obj, obj);
            } else {
              obj.text = func;
            }
          }
          if (attrs) {
            if (typeof attrs === 'object') {
              obj.attrs = attrs;
            }
            if (!func && typeof attrs === 'string') {
              obj.text = attrs;
            }
            if (func && typeof attrs === 'string') {
              obj.attrs = { 'class': attrs };
            }
          }
          this.buffer.push(obj);
          return void 0;
        };
        HtmlMaker.prototype.toString = function (end) {
          var el, res;
          res = function () {
            var i, len, ref, results;
            ref = this.buffer;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              el = ref[i];
              results.push(this.draw(el));
            }
            return results;
          }.call(this).join('');
          if (end) {
            res += end;
          }
          return res;
        };
        HtmlMaker.prototype.draw = function (el) {
          var attrs, content, i, key, len, ref, subEl, val;
          attrs = function () {
            var ref, results;
            ref = el.attrs;
            results = [];
            for (key in ref) {
              val = ref[key];
              results.push([key + "='" + val + "'"]);
            }
            return results;
          }();
          content = [];
          ref = el.buffer;
          for (i = 0, len = ref.length; i < len; i++) {
            subEl = ref[i];
            content.push(this.draw(subEl));
          }
          if (el.text) {
            content.push(el.text);
          }
          return '<' + el.tag + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' + content.join('') + '</' + el.tag + '>';
        };
        return HtmlMaker;
      }();
      if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = new HtmlMaker().start;
      }
      try {
        window.htmlmake = new HtmlMaker().start;
        window.HtmlMaker = HtmlMaker;
      } catch (_error) {
      }
    }.call(this));
  });
  require.define('/src/helper.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Helper, slice = [].slice;
      Helper = {
        partial: function () {
          var bounded, element, f, values;
          f = arguments[0], values = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          bounded = function () {
            var i, len, results;
            results = [];
            for (i = 0, len = values.length; i < len; i++) {
              element = values[i];
              results.push(element);
            }
            return results;
          }();
          return function () {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return f.apply(this, bounded.concat(args));
          };
        },
        use: function () {
          var args, context, fnc;
          fnc = arguments[0], context = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          if (fnc && typeof fnc === 'function') {
            return fnc.apply(context, args);
          } else {
            return fnc;
          }
        },
        makeTagFunctions: function (obj) {
          var i, len, ref, results, tgname;
          ref = Helper.tags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tgname = ref[i];
            results.push(obj[tgname] = Helper.partial(obj.el, obj, tgname));
          }
          return results;
        },
        tags: [
          'div',
          'ul',
          'li',
          'form',
          'input',
          'select',
          'option',
          'i',
          'a',
          'h1',
          'h2',
          'h3',
          'h4',
          'span'
        ]
      };
      module.exports = Helper;
    }.call(this));
  });
  require('/src/html-maker.js');
}.call(this, this));