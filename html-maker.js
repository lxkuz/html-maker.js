// Generated by CoffeeScript 1.7.1
(function() {
  var HtmlMaker,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  HtmlMaker = (function() {
    function HtmlMaker() {
      this.draw = __bind(this.draw, this);
      this.toString = __bind(this.toString, this);
      this.start = __bind(this.start, this);
    }

    HtmlMaker.prototype.tags = ["div", "ul", "li", "a", "span"];

    HtmlMaker.prototype.use = function() {
      var args, context, fnc;
      fnc = arguments[0], context = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (fnc && typeof fnc === "function") {
        return fnc.apply(context, args);
      } else {
        return fnc;
      }
    };

    HtmlMaker.prototype.partial = function() {
      var f, values;
      f = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return f.apply(this, values.concat(args));
      };
    };

    HtmlMaker.prototype.start = function(draw) {
      var tag, _i, _len, _ref;
      return "123qwe";
      this.buffer = [];
      _ref = HtmlMaker.prototype.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        this[tag] = HtmlMaker.prototype.partial(this.el, this, tag);
      }
      this.use(draw, this);
      return this;
    };

    HtmlMaker.prototype.el = function(parent, tag, attrs, func) {
      var obj, tgname, _i, _len, _ref;
      console.log("<" + tag + ">");
      console.log(this);
      this.func = func;
      this.attrs = attrs;
      this.buffer = [];
      this.tag = tag;
      obj = {};
      _ref = HtmlMaker.prototype.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tgname = _ref[_i];
        obj[tgname] = HtmlMaker.prototype.use(HtmlMaker.prototype.partial(HtmlMaker.prototype.el, this, tgname), obj);
      }
      HtmlMaker.prototype.use(this.func, obj);
      parent.buffer.push(this);
      return console.log("</" + this.tag + ">");
    };

    HtmlMaker.prototype.toString = function() {
      var el;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.buffer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(this.draw(el));
        }
        return _results;
      }).call(this)).join("");
    };

    HtmlMaker.prototype.draw = function(el) {
      var attrs, content, key, subEl, val, _i, _len, _ref, _ref1;
      console.log(el);
      attrs = "";
      _ref = el.attrs;
      for (key in _ref) {
        val = _ref[key];
        attrs += "" + key + "='" + val + "' ";
      }
      content = [];
      console.log(el);
      console.log(el.buffer);
      if (!el.text) {
        _ref1 = el.buffer;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subEl = _ref1[_i];
          content.push(this.draw(subEl));
        }
      } else {
        content = [el.text];
      }
      return "<" + el.tag + " " + attrs + ">" + (content.join('')) + "</" + el.tag + ">";
    };

    return HtmlMaker;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = (new HtmlMaker).start;
  } else {
    if (window) {
      window.htmlMake = (new HtmlMaker).start;
      window.HtmlMaker = HtmlMaker;
    }
  }

}).call(this);

//# sourceMappingURL=html-maker.map
