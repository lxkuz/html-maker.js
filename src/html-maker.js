// Generated by CoffeeScript 1.7.1
(function() {
  var HtmlMaker, helper,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  helper = require("src/helper");

  HtmlMaker = (function() {
    function HtmlMaker() {
      this.draw = __bind(this.draw, this);
      this.toString = __bind(this.toString, this);
      this.start = __bind(this.start, this);
    }

    HtmlMaker.prototype.start = function(func) {
      var res;
      console.log("start");
      this.buffer = [];
      helper.makeTagFunctions(this);
      console.log("use draw");
      res = helper.use(func, this);
      return this.toString(res);
    };

    HtmlMaker.prototype.el = function(parent, tag, attrs, func) {
      var obj;
      obj = {};
      obj.buffer = [];
      obj.tag = tag;
      obj.el = this.el;
      obj.attrs = {};
      helper.makeTagFunctions(obj);
      if (!func && typeof attrs === "function") {
        func = attrs;
      }
      if (func) {
        if (typeof func === "function") {
          obj.text = helper.use(func, obj);
        } else {
          obj.text = func;
        }
      }
      if (attrs) {
        if (typeof attrs === "object") {
          obj.attrs = attrs;
        }
        if (!func && typeof attrs === "string") {
          obj.text = attrs;
        }
        if (func && typeof attrs === "string") {
          obj.attrs = {
            "class": attrs
          };
        }
      }
      this.buffer.push(obj);
      return void 0;
    };

    HtmlMaker.prototype.toString = function(end) {
      var el, res;
      res = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.buffer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(this.draw(el));
        }
        return _results;
      }).call(this)).join("");
      if (end) {
        res += end;
      }
      return res;
    };

    HtmlMaker.prototype.draw = function(el) {
      var attrs, content, key, subEl, val, _i, _len, _ref;
      attrs = (function() {
        var _ref, _results;
        _ref = el.attrs;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push(["" + key + "='" + val + "'"]);
        }
        return _results;
      })();
      content = [];
      _ref = el.buffer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subEl = _ref[_i];
        content.push(this.draw(subEl));
      }
      if (el.text) {
        content.push(el.text);
      }
      console.log(content);
      return "<" + el.tag + (attrs.length > 0 ? " " + attrs.join(" ") : "") + ">" + (content.join('')) + "</" + el.tag + ">";
    };

    return HtmlMaker;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = (new HtmlMaker).start;
  }

  try {
    window.htmlmake = (new HtmlMaker).start;
    window.HtmlMaker = HtmlMaker;
  } catch (_error) {}

}).call(this);

//# sourceMappingURL=html-maker.map
