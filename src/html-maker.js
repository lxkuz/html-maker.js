// Generated by CoffeeScript 1.7.1
(function() {
  var HtmlMaker, helper,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  helper = require("src/helper");

  HtmlMaker = (function() {
    function HtmlMaker() {
      this.draw = __bind(this.draw, this);
      this.toString = __bind(this.toString, this);
      this.start = __bind(this.start, this);
      var tag, _i, _len, _ref;
      _ref = helper.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        helper.definePattern(this, tag, ["object", "string"], function(attrs, func) {
          var obj;
          obj = {};
          obj.attrs = attrs;
          obj.buffer = [];
          obj.tag = tag;
          obj.func = func;
          return this.buffer.push(obj);
        });
        helper.definePattern(this, tag, ["object", "string"], function(attrs, content) {
          var obj;
          console.log("pattern MATCH");
          console.log(arguments);
          obj = {};
          obj.attrs = attrs;
          obj.buffer = [];
          obj.tag = tag;
          obj.text = content;
          return this.buffer.push(obj);
        });
        helper.definePattern(this, tag, ["string"], function(content) {
          var obj;
          obj = {};
          obj.attrs = {};
          obj.buffer = [];
          obj.tag = tag;
          obj.text = content;
          return this.buffer.push(obj);
        });
      }
    }

    HtmlMaker.prototype.start = function(func) {
      console.log("start");
      this.buffer = [];
      console.log("use draw");
      helper.use(func, this);
      return this.toString();
    };

    HtmlMaker.prototype.toString = function() {
      var el;
      console.log("toString");
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.buffer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(this.draw(el));
        }
        return _results;
      }).call(this)).join("");
    };

    HtmlMaker.prototype.draw = function(el) {
      var attrs, content, key, subEl, val, _i, _len, _ref, _ref1;
      console.log("draw el " + (JSON.stringify(el)));
      attrs = "";
      _ref = el.attrs;
      for (key in _ref) {
        val = _ref[key];
        attrs += "" + key + "='" + val + "' ";
      }
      console.log(attrs);
      content = [];
      if (!el.text) {
        _ref1 = el.buffer;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subEl = _ref1[_i];
          content.push(this.draw(subEl));
        }
      } else {
        if (typeof el.text === "function") {
          content = helper.use(el.text, this);
        } else {
          content = [el.text];
        }
      }
      return "<" + el.tag + (attrs ? " " + attrs : "") + ">" + (content.join('')) + "</" + el.tag + ">";
    };

    return HtmlMaker;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = (new HtmlMaker).start;
  }

  try {
    window.htmlMake = (new HtmlMaker).start;
    window.HtmlMaker = HtmlMaker;
  } catch (_error) {}

}).call(this);

//# sourceMappingURL=html-maker.map
